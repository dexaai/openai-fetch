import type { CompletionResponseUsage } from './completion';
import { z } from 'zod';

/** Chat completion model name */
const ChatCompletionModel = z.union([
  z.literal('gpt-4'),
  z.literal('gpt-4-32k'),
  z.literal('gpt-3.5-turbo'),
  z.literal('gpt-3.5-turbo-16k'),
  z.string(),
]);

/** Chat message role */
export const ChatMessageRoleSchema = z.union([
  z.literal('system'),
  z.literal('user'),
  z.literal('assistant'),
  z.literal('function'),
]);
export type ChatMessageRole = z.infer<typeof ChatMessageRoleSchema>;

/** Chat completion function call */
export const ChatMessageFunctionCallSchema = z.object({
  /** The name of the function to call. */
  name: z.string(),
  /** The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
  arguments: z.string(),
});
export type ChatMessageFunctionCall = z.infer<
  typeof ChatMessageFunctionCallSchema
>;

/** Chat completion request message */
export const ChatMessageSchema = z.object({
  /** The role of the author of this message. */
  role: ChatMessageRoleSchema,
  /** The contents of the message */
  content: z.string(),
  /** The name of the user in a multi-user chat */
  name: z.string().nullish(),
  /** The name and arguments of a function that should be called */
  function_call: ChatMessageFunctionCallSchema.optional(),
});
export type ChatMessage = z.infer<typeof ChatMessageSchema>;

/** Chat completion function definition */
export const ChatMessageFunctionchema = z.object({
  /** The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
  name: z.string(),
  /** The description of what the function does. */
  description: z.string().optional(),
  /** The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. */
  parameters: z.record(z.string(), z.any()).optional(),
});
export type ChatMessageFunction = z.infer<typeof ChatMessageFunctionchema>;

export const ChatCompletionParamsSchema = z.object({
  /** ID of the model to use. */
  model: ChatCompletionModel,
  /** The messages to generate chat completions for, in the [chat format](/docs/guides/chat/introduction). */
  messages: z.array(ChatMessageSchema),
  /** A list of functions the model may generate JSON inputs for. */
  functions: z.array(ChatMessageFunctionchema).optional(),
  /** Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function. Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present. */
  function_call: z
    .union([
      z.literal('auto'),
      z.literal('none'),
      z.object({ name: z.string() }),
    ])
    .optional(),
  /** What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both. */
  temperature: z.number().nullish(),
  /** An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both. */
  top_p: z.number().nullish(),
  /** Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. */
  stop: z.union([z.string(), z.array(z.string())]).nullish(),
  /** The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens). */
  max_tokens: z.number().nullish(),
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */
  presence_penalty: z.number().nullish(),
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details) */
  frequency_penalty: z.number().nullish(),
  /** Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. */
  logit_bias: z.record(z.number()).nullish(),
  /** A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). */
  user: z.string().nullish(),
  /**
   * NOT SUPPORTED
   * - n
   * - stream
   */
});

export type ChatCompletionParams = z.input<typeof ChatCompletionParamsSchema>;

export type ChatCompletionResponse = {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: ChatCompletionResponseChoices;
  usage?: CompletionResponseUsage;
};

export type ChatResponseMessage = {
  /** The role of the author of this message. */
  role: ChatMessageRole;
  /** The contents of the message */
  content: string;
  /** The name and arguments of a function to call */
  function_call?: ChatMessageFunctionCall;
};

export type ChatCompletionResponseChoices = {
  index?: number;
  finish_reason?: string;
  message?: ChatResponseMessage;
  /** Used instead of `message` when streaming */
  delta?: ChatResponseMessage;
}[];
